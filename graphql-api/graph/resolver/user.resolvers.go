package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"graphql-api/entity"
	"graphql-api/graph/model"
	"graphql-api/middleware"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	newUser := &entity.User{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}

	err := r.uu.CreateUser(ctx, newUser)
	if err != nil {
		return nil, err
	}

	newUser.Password = input.Password
	tokenString, err := r.uu.Login(ctx, newUser)
	if err != nil {
		return nil, err
	}

	resUser := &model.User{
		ID:   strconv.Itoa(newUser.UserID),
		Name: newUser.Name,
	}

	middleware.SetAuthCookie(ctx, tokenString)

	return resUser, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.User, error) {
	loginUser := &entity.User{
		Email:    input.Email,
		Password: input.Password,
	}
	tokenString, err := r.uu.Login(ctx, loginUser)
	if err != nil {
		return nil, err
	}

	resUser := &model.User{
		ID:   strconv.Itoa(loginUser.UserID),
		Name: loginUser.Name,
	}

	middleware.SetAuthCookie(ctx, tokenString)

	return resUser, nil
}
